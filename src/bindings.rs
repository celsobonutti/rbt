// ⚠️ GENERATED CODE ⚠️ - this entire file was generated by the `roc-bindgen` CLI

#![allow(dead_code)]
#![allow(unused_mut)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::undocumented_unsafe_blocks)]

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(transparent)]
pub struct Rbt {
    pub default: Job,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum discriminant_Job {
    Job = 0,
}

impl core::fmt::Debug for discriminant_Job {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Job => f.write_str("discriminant_Job::Job"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(C)]
pub union Job {
    Job: core::mem::ManuallyDrop<R1>,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
pub struct R1 {
    pub command: Command,
    pub inputFiles: roc_std::RocList<roc_std::RocStr>,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum discriminant_Command {
    Command = 0,
}

impl core::fmt::Debug for discriminant_Command {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Command => f.write_str("discriminant_Command::Command"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(C)]
pub union Command {
    Command: core::mem::ManuallyDrop<R2>,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(transparent)]
pub struct R2 {
    pub tool: Tool,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum discriminant_Tool {
    SystemTool = 0,
}

impl core::fmt::Debug for discriminant_Tool {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::SystemTool => f.write_str("discriminant_Tool::SystemTool"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(C)]
pub union Tool {
    SystemTool: core::mem::ManuallyDrop<R3>,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Default, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(transparent)]
pub struct R3 {
    pub name: roc_std::RocStr,
}

impl Job {
    #[cfg(any(target_arch = "arm", target_arch = "wasm32", target_arch = "x86"))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Job {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Job>(*bytes.as_ptr().add(23))
        }
    }

    #[cfg(any(target_arch = "arm", target_arch = "wasm32", target_arch = "x86"))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Job) {
        let discriminant_ptr: *mut discriminant_Job = (self as *mut Job).cast();

        unsafe {
            *(discriminant_ptr.add(23)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named Job, with the appropriate payload
    pub fn Job(arg0: Command, arg1: roc_std::RocList<roc_std::RocStr>) -> Self {
        let mut answer = Self {
            Job: core::mem::ManuallyDrop::new(R1 {
                command: arg0,
                inputFiles: arg1,
            }),
        };

        answer.set_discriminant(discriminant_Job::Job);

        answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given Job has a .discriminant() of Job and convert it to Job's payload.
    /// (Always examine .discriminant() first to make sure this is the correct variant!)
    /// Panics in debug builds if the .discriminant() doesn't return Job.
    pub unsafe fn into_Job(mut self) -> (Command, roc_std::RocList<roc_std::RocStr>) {
        debug_assert_eq!(self.discriminant(), discriminant_Job::Job);

        let payload = core::mem::ManuallyDrop::take(&mut self.Job);

        (payload.command, payload.inputFiles)
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given Job has a .discriminant() of Job and return its payload.
    /// (Always examine .discriminant() first to make sure this is the correct variant!)
    /// Panics in debug builds if the .discriminant() doesn't return Job.
    pub unsafe fn as_Job(&self) -> (&Command, &roc_std::RocList<roc_std::RocStr>) {
        debug_assert_eq!(self.discriminant(), discriminant_Job::Job);

        let payload = &self.Job;

        (&payload.command, &payload.inputFiles)
    }

    #[cfg(any(target_arch = "aarch64", target_arch = "x86_64"))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Job {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Job>(*bytes.as_ptr().add(47))
        }
    }

    #[cfg(any(target_arch = "aarch64", target_arch = "x86_64"))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Job) {
        let discriminant_ptr: *mut discriminant_Job = (self as *mut Job).cast();

        unsafe {
            *(discriminant_ptr.add(47)) = discriminant;
        }
    }
}

impl Drop for Job {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn drop(&mut self) {
        // Drop the payloads
        match self.discriminant() {
            discriminant_Job::Job => unsafe { core::mem::ManuallyDrop::drop(&mut self.Job) },
        }
    }
}

impl Eq for Job {}

impl PartialEq for Job {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
        if self.discriminant() != other.discriminant() {
            return false;
        }

        unsafe {
            match self.discriminant() {
                discriminant_Job::Job => self.Job == other.Job,
            }
        }
    }
}

impl PartialOrd for Job {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                discriminant_Job::Job => self.Job.partial_cmp(&other.Job),
            }
        }
    }
}

impl Ord for Job {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
        match self.discriminant().cmp(&other.discriminant()) {
            core::cmp::Ordering::Equal => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                discriminant_Job::Job => self.Job.cmp(&other.Job),
            }
        }
    }
}

impl Clone for Job {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        let mut answer = unsafe {
            match self.discriminant() {
                discriminant_Job::Job => Self {
                    Job: self.Job.clone(),
                },
            }
        };

        answer.set_discriminant(self.discriminant());

        answer
    }
}

impl core::hash::Hash for Job {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        match self.discriminant() {
            discriminant_Job::Job => unsafe {
                discriminant_Job::Job.hash(state);
                self.Job.hash(state);
            },
        }
    }
}

impl core::fmt::Debug for Job {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("Job::")?;

        unsafe {
            match self.discriminant() {
                discriminant_Job::Job => f.debug_tuple("Job").field(&*self.Job).finish(),
            }
        }
    }
}

impl Command {
    #[cfg(any(target_arch = "arm", target_arch = "wasm32", target_arch = "x86"))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Command {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Command>(*bytes.as_ptr().add(11))
        }
    }

    #[cfg(any(target_arch = "arm", target_arch = "wasm32", target_arch = "x86"))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Command) {
        let discriminant_ptr: *mut discriminant_Command = (self as *mut Command).cast();

        unsafe {
            *(discriminant_ptr.add(11)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named Command, with the appropriate payload
    pub fn Command(arg0: Tool) -> Self {
        let mut answer = Self {
            Command: core::mem::ManuallyDrop::new(R2 { tool: arg0 }),
        };

        answer.set_discriminant(discriminant_Command::Command);

        answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given Command has a .discriminant() of Command and convert it to Command's payload.
    /// (Always examine .discriminant() first to make sure this is the correct variant!)
    /// Panics in debug builds if the .discriminant() doesn't return Command.
    pub unsafe fn into_Command(mut self) -> Tool {
        debug_assert_eq!(self.discriminant(), discriminant_Command::Command);

        let payload = core::mem::ManuallyDrop::take(&mut self.Command);

        payload.tool
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given Command has a .discriminant() of Command and return its payload.
    /// (Always examine .discriminant() first to make sure this is the correct variant!)
    /// Panics in debug builds if the .discriminant() doesn't return Command.
    pub unsafe fn as_Command(&self) -> &Tool {
        debug_assert_eq!(self.discriminant(), discriminant_Command::Command);

        let payload = &self.Command;

        &payload.tool
    }

    #[cfg(any(target_arch = "aarch64", target_arch = "x86_64"))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Command {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Command>(*bytes.as_ptr().add(23))
        }
    }

    #[cfg(any(target_arch = "aarch64", target_arch = "x86_64"))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Command) {
        let discriminant_ptr: *mut discriminant_Command = (self as *mut Command).cast();

        unsafe {
            *(discriminant_ptr.add(23)) = discriminant;
        }
    }
}

impl Drop for Command {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn drop(&mut self) {
        // Drop the payloads
        match self.discriminant() {
            discriminant_Command::Command => unsafe {
                core::mem::ManuallyDrop::drop(&mut self.Command)
            },
        }
    }
}

impl Eq for Command {}

impl PartialEq for Command {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
        if self.discriminant() != other.discriminant() {
            return false;
        }

        unsafe {
            match self.discriminant() {
                discriminant_Command::Command => self.Command == other.Command,
            }
        }
    }
}

impl PartialOrd for Command {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                discriminant_Command::Command => self.Command.partial_cmp(&other.Command),
            }
        }
    }
}

impl Ord for Command {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
        match self.discriminant().cmp(&other.discriminant()) {
            core::cmp::Ordering::Equal => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                discriminant_Command::Command => self.Command.cmp(&other.Command),
            }
        }
    }
}

impl Clone for Command {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        let mut answer = unsafe {
            match self.discriminant() {
                discriminant_Command::Command => Self {
                    Command: self.Command.clone(),
                },
            }
        };

        answer.set_discriminant(self.discriminant());

        answer
    }
}

impl core::hash::Hash for Command {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        match self.discriminant() {
            discriminant_Command::Command => unsafe {
                discriminant_Command::Command.hash(state);
                self.Command.hash(state);
            },
        }
    }
}

impl core::fmt::Debug for Command {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("Command::")?;

        unsafe {
            match self.discriminant() {
                discriminant_Command::Command => {
                    f.debug_tuple("Command").field(&*self.Command).finish()
                }
            }
        }
    }
}

impl Tool {
    #[cfg(any(target_arch = "arm", target_arch = "wasm32", target_arch = "x86"))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Tool {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Tool>(*bytes.as_ptr().add(11))
        }
    }

    #[cfg(any(target_arch = "arm", target_arch = "wasm32", target_arch = "x86"))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Tool) {
        let discriminant_ptr: *mut discriminant_Tool = (self as *mut Tool).cast();

        unsafe {
            *(discriminant_ptr.add(11)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named SystemTool, with the appropriate payload
    pub fn SystemTool(arg0: roc_std::RocStr) -> Self {
        let mut answer = Self {
            SystemTool: core::mem::ManuallyDrop::new(R3 { name: arg0 }),
        };

        answer.set_discriminant(discriminant_Tool::SystemTool);

        answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given Tool has a .discriminant() of SystemTool and convert it to SystemTool's payload.
    /// (Always examine .discriminant() first to make sure this is the correct variant!)
    /// Panics in debug builds if the .discriminant() doesn't return SystemTool.
    pub unsafe fn into_SystemTool(mut self) -> roc_std::RocStr {
        debug_assert_eq!(self.discriminant(), discriminant_Tool::SystemTool);

        let payload = core::mem::ManuallyDrop::take(&mut self.SystemTool);

        payload.name
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given Tool has a .discriminant() of SystemTool and return its payload.
    /// (Always examine .discriminant() first to make sure this is the correct variant!)
    /// Panics in debug builds if the .discriminant() doesn't return SystemTool.
    pub unsafe fn as_SystemTool(&self) -> &roc_std::RocStr {
        debug_assert_eq!(self.discriminant(), discriminant_Tool::SystemTool);

        let payload = &self.SystemTool;

        &payload.name
    }

    #[cfg(any(target_arch = "aarch64", target_arch = "x86_64"))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Tool {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Tool>(*bytes.as_ptr().add(23))
        }
    }

    #[cfg(any(target_arch = "aarch64", target_arch = "x86_64"))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Tool) {
        let discriminant_ptr: *mut discriminant_Tool = (self as *mut Tool).cast();

        unsafe {
            *(discriminant_ptr.add(23)) = discriminant;
        }
    }
}

impl Drop for Tool {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn drop(&mut self) {
        // Drop the payloads
        match self.discriminant() {
            discriminant_Tool::SystemTool => unsafe {
                core::mem::ManuallyDrop::drop(&mut self.SystemTool)
            },
        }
    }
}

impl Eq for Tool {}

impl PartialEq for Tool {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
        if self.discriminant() != other.discriminant() {
            return false;
        }

        unsafe {
            match self.discriminant() {
                discriminant_Tool::SystemTool => self.SystemTool == other.SystemTool,
            }
        }
    }
}

impl PartialOrd for Tool {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                discriminant_Tool::SystemTool => self.SystemTool.partial_cmp(&other.SystemTool),
            }
        }
    }
}

impl Ord for Tool {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
        match self.discriminant().cmp(&other.discriminant()) {
            core::cmp::Ordering::Equal => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                discriminant_Tool::SystemTool => self.SystemTool.cmp(&other.SystemTool),
            }
        }
    }
}

impl Clone for Tool {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        let mut answer = unsafe {
            match self.discriminant() {
                discriminant_Tool::SystemTool => Self {
                    SystemTool: self.SystemTool.clone(),
                },
            }
        };

        answer.set_discriminant(self.discriminant());

        answer
    }
}

impl core::hash::Hash for Tool {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        match self.discriminant() {
            discriminant_Tool::SystemTool => unsafe {
                discriminant_Tool::SystemTool.hash(state);
                self.SystemTool.hash(state);
            },
        }
    }
}

impl core::fmt::Debug for Tool {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("Tool::")?;

        unsafe {
            match self.discriminant() {
                discriminant_Tool::SystemTool => f
                    .debug_tuple("SystemTool")
                    .field(&*self.SystemTool)
                    .finish(),
            }
        }
    }
}
